name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and lint
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 libsqlite3-dev
        go mod download

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

    - name: Run linter
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  # Build test for multiple platforms
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu gcc-mingw-w64

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        # Set cross-compilation environment
        case "${{ matrix.goos }}-${{ matrix.goarch }}" in
          linux-arm64)
            export CC=aarch64-linux-gnu-gcc
            ;;
          windows-amd64)
            export CC=x86_64-w64-mingw32-gcc
            ;;
          darwin-arm64)
            export CGO_ENABLED=0  # Disable CGO for macOS
            ;;
        esac
        
        # Test build
        go build -ldflags="-w -s" -o myencrypt-test ./cmd/myencrypt
        echo "✅ Build successful for ${{ matrix.goos }}/${{ matrix.goarch }}"

  # Docker build test
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: myencrypt:test
        build-args: |
          VERSION=ci-test
          COMMIT=${{ github.sha }}
          DATE=${{ github.event.head_commit.timestamp }}

    - name: Test Docker image functionality
      run: |
        # Test amd64 image
        docker run --rm --platform linux/amd64 myencrypt:test version
        
        # Test basic functionality
        echo "✅ Docker build and basic functionality test passed"

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 libsqlite3-dev
        go mod download

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Install security tools
      run: |
        # Install gosec for security scanning
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        
        # Install staticcheck for static analysis
        go install honnef.co/go/tools/cmd/staticcheck@latest
        
        # Install govulncheck for vulnerability scanning
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run Gosec Security Scanner
      run: |
        gosec -fmt sarif -out gosec.sarif ./...
        gosec -fmt json -out gosec.json ./...
      continue-on-error: true

    - name: Run Staticcheck
      run: |
        staticcheck -f sarif ./... > staticcheck.sarif || true
      continue-on-error: true

    - name: Run Vulnerability Check
      run: |
        govulncheck ./...
      continue-on-error: true

    - name: Upload Gosec SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec.sarif
        category: gosec

    - name: Upload Staticcheck SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('staticcheck.sarif') != ''
      with:
        sarif_file: staticcheck.sarif
        category: staticcheck

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          gosec.sarif
          gosec.json
          staticcheck.sarif

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Check dependencies
      run: |
        go mod verify
        go mod tidy
        git diff --exit-code go.mod go.sum

    - name: Check for outdated dependencies
      run: |
        go list -u -m all

  # Build development Docker image
  build-dev-docker:
    name: Build Dev Docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=dev-

    - name: Build and push development image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
