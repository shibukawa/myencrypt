name: Release

on:
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build Binaries
    strategy:
      matrix:
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: .exe
          - os: macos-latest
            goos: darwin
            goarch: arm64
            ext: ""
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
          - os: ubuntu-24.04-arm
            goos: linux
            goarch: arm64
            ext: ""
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable

    - name: Install dependencies (Linux)
      if: runner.os == 'linux'
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y --no-install-recommends \
          build-essential

    - name: Install dependencies (Windows)
      if: runner.os == 'windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        path-type: inherit
        install: mingw-w64-x86_64-gcc make

    - name: Install dependencies (macOS)
      if: runner.os == 'darwin'
      run: |
        brew install gcc

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build (Linux/macOS)
      if: runner.os != 'Windows'
      env:
        CGO_ENABLED: 1
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        BINARY_NAME="myencrypt-${{ matrix.goos }}-${{ matrix.goarch }}"
        go build \
          -ldflags "-w -s -X 'main.Version=${{ github.ref_name }}'" \
          -o "dist/${BINARY_NAME}" \
          ./cmd/myencrypt

    - name: Build (Windows)
      if: runner.os == 'Windows'
      env:
        CGO_ENABLED: 1
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      shell: msys2 {0}
      run: |
        mkdir -p dist
        BINARY_NAME="myencrypt-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
        go build \
          -ldflags "-w -s -X 'main.Version=${{ github.ref_name }}'" \
          -o "dist/${BINARY_NAME}" \
          ./cmd/myencrypt

    - name: Create archive
      shell: bash
      run: |
        BINARY_NAME="dist/myencrypt-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
        ARCHIVE_NAME="dist/myencrypt-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}"
        
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          7z a "${ARCHIVE_NAME}.zip" "${BINARY_NAME}" README.md README.ja.md LICENSE
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
        else
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}" README.md README.ja.md LICENSE
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          dist/*.zip
          dist/*.tar.gz
        retention-days: 1

  build-docker:
    name: Build and Push Docker Images
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04-arm
            platform: linux/arm64
            platform_pair: linux-arm64
          - os: ubuntu-latest
            platform: linux/amd64
            platform_pair: linux-amd64
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        build-args: |
          VERSION=${{ github.ref_name }}

    - name: Export digest
      run: |
        mkdir -p ${{ runner.temp }}/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "${{ runner.temp }}/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: "digests-${{ matrix.platform_pair }}"
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1
          
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    permissions:
      contents: write

    steps:
    - name: Download digests
      uses: actions/download-artifact@v4
      with:
        path: ${{ runner.temp }}/digests
        pattern: digests-*
        merge-multiple: true

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Create manifest list and push
      working-directory: ${{ runner.temp }}/digests
      run: |
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

    - name: Inspect image
      run: |
        docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all release assets
      uses: actions/download-artifact@v4
      with:
        pattern: release-assets-*
        path: artifacts
        merge-multiple: true

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find artifacts -type f -name "*.zip" -o -name "*.tar.gz" | sort

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🚀 Release ${{ github.ref_name }}
        
        ### 📦 Downloads
        
        #### Binaries
        - **Windows (AMD64)**: `myencrypt-${{ github.ref_name }}-windows-amd64.zip`
        - **macOS (ARM64)**: `myencrypt-${{ github.ref_name }}-darwin-arm64.tar.gz`
        - **Linux (AMD64)**: `myencrypt-${{ github.ref_name }}-linux-amd64.tar.gz`
        - **Linux (ARM64)**: `myencrypt-${{ github.ref_name }}-linux-arm64.tar.gz`
        
        #### Docker Images
        ```bash
        # Multi-architecture (AMD64 + ARM64)
        docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        docker pull ghcr.io/${{ github.repository }}:latest
        ```
        
        ### 🔧 Installation
        
        #### Binary Installation
        1. Download the appropriate binary for your platform
        2. Extract the archive
        3. Make executable (Unix): `chmod +x myencrypt`
        4. Run: `./myencrypt --help`
        
        #### Docker Installation
        ```bash
        docker run --rm -p 18888:18888 ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        ```
        
        ### 📋 What's Changed
        
        See the commit history for detailed changes in this release.
        
        ### 🔍 Verification
        
        All binaries and Docker images have been built and tested with:
        - ✅ Unit tests passed
        - ✅ Multi-architecture support
        - ✅ Standards compliance verified
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
