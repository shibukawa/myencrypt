name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  GO_VERSION: stable

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: .exe
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            ext: ""
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -qq update
          sudo apt-get install -y --no-install-recommends \
            build-essential

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: mingw-w64-x86_64-gcc make

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc

      - name: Get version
        id: version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build \
            -ldflags "-w -s -X 'main.Version=${{ steps.version.outputs.version }}'" \
            -o "myencrypt-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}" \
            ./cmd/myencrypt

      - name: Build (Windows)
        if: runner.os == 'Windows'
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        shell: msys2 {0}
        run: |
          go build \
            -ldflags "-w -s -X 'main.Version=${{ steps.version.outputs.version }}'" \
            -o "myencrypt-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}" \
            ./cmd/myencrypt

      - name: Test binary
        shell: bash
        run: |
          BINARY_NAME="myencrypt-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ./$BINARY_NAME --version || echo "Version check completed"
          else
            ./$BINARY_NAME --version
          fi

      - name: Create archive
        shell: bash
        run: |
          BINARY_NAME="myencrypt-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
          ARCHIVE_NAME="myencrypt-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            7z a "${ARCHIVE_NAME}.zip" "$BINARY_NAME" README.md
            echo "ARCHIVE_NAME=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" "$BINARY_NAME" README.md
            echo "ARCHIVE_NAME=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: myencrypt-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.ARCHIVE_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts from the build job
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: MyEncrypt ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          generate_release_notes: true
          files: |
            ./myencrypt-*/myencrypt-*

  # Docker build job (optional)
  docker:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        tags: |
          myencrypt:latest
          myencrypt:${{ steps.version.outputs.version }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
