events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Character encoding
    charset utf-8;
    charset_types text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    # HTTP server (for ACME challenges and redirects)
    server {
        listen 80;
        server_name app-certbot.localhost;
        
        # ACME challenge location for Certbot
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
            
            # Add headers for debugging
            add_header X-Debug-Challenge "Found" always;
            
            # Ensure proper content type
            location ~* \.(txt)$ {
                add_header Content-Type text/plain;
            }
        }
        
        # Test endpoint for debugging (lower priority)
        location = /.well-known/acme-challenge/test {
            return 200 "Nginx ACME challenge endpoint is working\n";
            add_header Content-Type text/plain;
        }
        
        # Health check
        location /health {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name app-certbot.localhost;
        
        # SSL certificate paths (will be created by Certbot)
        ssl_certificate /etc/letsencrypt/live/app-certbot.localhost/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/app-certbot.localhost/privkey.pem;
        
        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Custom headers to show it's served by Nginx with MyEncrypt
        add_header X-Served-By "Nginx with MyEncrypt" always;
        add_header X-Protocol "HTTPS" always;
        add_header X-Proxy "Nginx" always;
        
        # Document root
        root /var/www/html;
        index index.html index.htm;
        
        # Main location
        location / {
            try_files $uri $uri/ =404;
            
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API proxy example (optional)
        location /api/ {
            proxy_pass http://simple-http-app:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Rate limiting for API
            limit_req zone=api burst=10 nodelay;
        }
    }
}
